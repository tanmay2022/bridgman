/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
convertToMeters 50e-6;
x_min 0;
x_max 200; //direction of growth
y_min 0;
y_max 200;
z_min 0;
z_max 1;

// x_min -200;
// x_max 200;
// y_min -5;
// y_max 5;

// should all be integers
/*lx #calc "$x_max - $x_min";
ly #calc "$y_max - $y_min";
lz #calc "$z_max - $z_min";*/ // should all be integers
vertices
(
	($x_min $y_min $z_min)
    ($x_max $y_min $z_min)
    ($x_max $y_max $z_min)
    ($x_min $y_max $z_min)
    ($x_min $y_min $z_max)
    ($x_max $y_min $z_max)
    ($x_max $y_max $z_max)
    ($x_min $y_max $z_max)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) ($x_max $y_max 1) simpleGrading (1 1 1) // for dx = 0.5: simpleGrading (2 2 2) or convertToMeters = 0.5
);

edges
(
);

//================ FOR ZERO-FLUX BOUNDARY CONDITIONS ============
// boundary
// (
//     floor
//     {
//          type wall;
// 	//	type empty;
//         faces
//         (
// 		(0 1 5 4)
//         );
//     }
//     
//     ceiling
//     {
//         type patch;
// 	//	type empty;
//         faces
//         (
// 			(2 3 7 6)
//         );
//     }
//     sideSolid
//     {
//         type wall;
//         faces
//         (
//             (0 3 2 1)
//             (0 4 7 3)
//             (4 5 6 7)
//             (1 2 6 5)
//         );
//     }
//     
// );
// 
// mergePatchPairs
// (
//         
// );


//================= FOR CYCLIC BOUNDARY CONDITIONS ==============
boundary
(
    top
    {
        type cyclic;
        neighbourPatch bottom;
        faces
        (
        
            (0 1 5 4)
        );
    }
    bottom
    {
        type cyclic;
        neighbourPatch top;
        faces
        (
            (2 3 7 6)
        );
     }
     left
     {
	type cyclic;
        neighbourPatch right;
	faces
	(
		(1 2 6 5)
	);	
     }

     right
     {
	type cyclic;
        neighbourPatch left;
	faces
	(
                (0 4 7 3)
	);	
     }
    

    frontAndBack
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
